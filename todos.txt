- gensyms in macros (hygenic macros)
- namespaces (review concept, use and test)
- 'native' (aka javascript) function interface
	=> Idea: have user add to wisp.userFunctions and object similar to basic env in syntax & interface.
			All functions added get mixed in under keyed namespace
- sequences (do expr1 expr2 ... exprn) => evaluates each expression and returns expression n
	=> this might be progn, seq, or do... look at CL/clojure and pick best name
- boolean basic operators
- compare to clojure basic read types
- Better error messages
- mutation / while loop
- lazy evaluation (want infinite lists, etc..)
- continuations (want a call/cc structure)
- objects/type system/define-type?
- add toWispString() to objects (for closure printing, etc..), general pretty printing for all values
- Garbage collection & memory usage -> reason about this. Gut inclination is currently implementation eats up memory. Maybe JS takes care of this?
- Exception Handling
- Access to Dom? Perhaps can drop down to jquery, or at least use jquery selectors natively e.g. (append ("#mydiv") "wicked"). Or something.
- Improve test coverage
- docstrings in wisp
- better documentation all around